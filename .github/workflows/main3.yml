# This is a basic workflow to help you get started with Actions

name: CICD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Get current time
        uses: gerred/actions/current-time@master
        id: current-time

      # docker push시 사용할 환경변수
      - name: set env
        run : echo "RELEASE_VERSION=${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

      # Runs a single command using the runners shell
      - name: ls
        run: ls -al

      # Runs a set of commands using the runners shell
      - name: echo
        run: echo "This is Checkout"

      - name: install jdk
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'gradle'
      
      - name: chmod gradle
        run: chmod +x ./gradlew
        
      - name: build
        run: ./gradlew build --no-daemon
        
      - name: check build
        run: ls ./build/libs
        
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        
      - name: docker ps
        run: docker ps
        
      - name : docker build
        run:  |
          cp ./build/libs/*.war ./Dockerfile
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/m-dev:tomcat_latest ./Dockerfile
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/m-dev:tomcat_${{ env.RELEASE_VERSION}} ./Dockerfile
          docker images
          
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
                
      - name: docker push
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/m-dev:tomcat_${{ env.RELEASE_VERSION}} 
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/m-dev:tomcat_latest
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          cluster-name: test-1
          
      - name: update config
        run: aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name test-1
          
      - name: was-deploy restart
        run: kubectl rollout restart deployment/was
          
      - name: rename file
        run: mv ./build/libs/*.war ./build/libs/$TIME.war
        env:
          TIME: "${{ steps.current-time.outputs.time }}"

      - name : eks cloud storage backup
        run : aws s3 cp --region ${{ secrets.AWS_REGION }} --acl private ./build/libs/*.war s3://${{ secrets.AWS_S3_BUCKET }}

#         uses: shallwefootball/s3-upload-action@master
#         with:
#           aws_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws_bucket: ${{ secrets.AWS_S3_BUCKET }}
#           source_dir: ./build/libs/
#           destination_dir: /backup/


     
